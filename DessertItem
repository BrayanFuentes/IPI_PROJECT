/*
 * Curtis Nishihira and Brayan Fuentes
 * February 20, 2020
 * Purpose: Main purpose of the class is to represent a dessert item, acts as super class for subclasses that extend.
 * Inputs: the name of the dessert item as a string. 
 * Outputs: the dessert item as a readable string.
 */
public abstract class DessertItem implements Comparable<DessertItem>{

  protected String name;

/**
 * Null constructor for DessertItem class
 */
  public DessertItem() {
    this("");
  }
/**
 * Initializes DessertItem data
 */
  public DessertItem(String name) {
      this.name = name;
      }
/**
 * Returns name of DessertItem
 * @return name of DessertItem
 */
  public final String getName() {
    return name;
  }
/**
 * Returns cost of DessertItem
 * @return cost of DessertItem
 */
  public abstract double getCost();
  public abstract int getCalorie();
@Override 
  public int compareTo(DessertItem item)
  {
	 int main = this.getCalorie();
	 int other = item.getCalorie();
	 if(main > other)
	 {
		 return 0;
	 }
	 else
	 {
		 return 1;
	 }
  }
  public int compareTo(DessertItem item)
  {
	 if(this.getCalorie() > item.getCalorie())
	 {
		 return 1;
	 }
	 if(this.getCalorie() < item.getCalorie())
	 {
		 return -1;
	 }
	 else
	 {
		 return 0;
	 }
  }
  
  public static String max(ArrayList<DessertItem> item)
  {
	  DessertItem max = item.get(0);
	  
	  for(int i = 1; i < item.size();i++)
	  {
		  if(max.compareTo(item.get(i)) == 1)
		  {
			  max = item.get(i);
		  }
	  }
	  return max.getName();
  }

}
